we called the infrastructure "Flyton" , 
Flyton is a methodology of writing code for web projects , 
the Rules:
- using apahce2 on linux ubuntu on EC2 on AWS
- using cloudFront to map a domain with SSL to the ptoject , ex: https://www.myproject.com will point to the ip of the EC2 server
- using mysql database
- apache2 will have a cgi script that will run the python code on server side and generate the HTML output (like php)
- The Flyton core of code will be openSource , it's include a long list (follow up)
- Use AWS cloud9 as the IDE on the dev server , prod server will be accessed only from the "dev" 
- Flyton core of utility are:
-- the cgi script
-- mysql access platform with few functions , write and read from the database
-- some utility in python to generate nice buttons and HTML elements
-- all session management , from the login to the clearing of expired session
-- manage the jump from one page of html to the next page using functions in python
-- manage calling to the server via api , a set of JS code for client and python code for the server which will make it easy to jump from the client directly to the server python code and exchage Objects
-a directory structure , for
-- client
-- server
-- static pages HTMR/CSS/JS/assets 
-Mysql 
-- all acces via one utiity , sql.py with read/write/delete ready made functions
--- read find_in_sql()
--- write/update insert_to_sql()
--All tables in the database will have the same structure
---the unique id "id" - most of the time will be integer , autoIncrement , start with 4 digit or 5 digit for convineint , some talbes will strat with 300 , some with 4000 - so id's in the system will be easy to recognize , amount of digits will be design for the amount of maximum records we intesipate
---field "name" - text
---field "is_active" = 1 if active (default) 0 if not - we will not delete records , we will mark the "is_active"=0 , is_active is integer
---field "created_at" - date of creatation (automatically)
---field "updated_at" - date of modify (automatically)
---field "data" - json format - will hold dynamic field of a record 
---other field as needed - But only if all records need it.
--all condition in Database is 0 or 1 , 0 is false , 1 is true
--file contain the create command of SQL : tables.sql - with documentations and exaple of records for each table 
--in this file , the DROP connad will also be documented so you wuill be able to delete a table
--in this file , short example (3 lines top) of each table , so programmers will be learn from example of structure of tales
--mysql shell in linux - we use the shell only - so programmers will be use to use SQL commands - not a web platform 
-writing code
--Simple
---if you have 4 way of writing - do the simp[e way
---avoid "else" or "elif" - when a programmer read a code - it's more easy to read condition with no "else"
--all conditions 0-faluse 1-true -- do not use Tru of python or 'true' of javascript. 
--using an f-string as a main function to embeded a variable into the string of the HTML you generate
--do not put condition inside the f-string - use the condition before generating the HTML
--do not put JS code in python , make it a file.js with your JS code.
--the web page need to be cut into at least 3 parts , header,body,footer
--the "body" part need to be dynamic based on an "rpage" - variable which should redirect the python code to rpage.py ( if rpage="about" the page need to be about.py )
--the directory scturcure
---/client/admin
---/client/weba
---/client/pages
---/client/pages/lib
---/client/pages/files
---/client/pages/im
---/server
---/server/cgi-bin
---/server/apis
---/server/apis/api
---/server/apis/tools
---/server/apis/tools/cron
-- The tools on the server side will be linked to the clien side 
-- server side "tools" 
--- will hold all the open source utility
--- all database access will have a db_table.py name so the table name is "table" , ex: if there is a "prod" table for products the file will be called db_prod.py
--- naming , if there is a user , it's id is user_id , if there is a product with "prod" table , it's id is "prod_id" , the id's are integers
--- use short variables naming
--- use the same table name in all other variante of the naming , 
---- example : product , the id - prod_id , the object is prod["name"]="product name" prod["is_active"]=1 ....
---- table that extend main table will have it's name as prefix , ex: product data , main table "prod" , data of product table name "prod_data" , prod_dat table will include the key "prod_id" which will point the the "prod" table
--Functions naming:
---only lower case
---first function on a .py file will have the same name of the file : dashboard.py will have "def dashbord(data):" function name.
--Do not install any packages !!! 
--if you must install - it's need to be very very low and only of you have no other chices
--each file of page will have a data object : def contact(data):  the data wil have the session saved data and the session id :   ses=data["ses"]
-sessions
-- sessions will be managed on "ses"table on the SQL
-- do not use cookies or localStorage , the session will save the session id on the LocalSession storage of the browser
-- use our login.html example to connect user to the system , use our MFA example as well if needed 
-- save to a session data if you need it in the next pages , the session data will be save in the "ses" table , and will be ready for you at each page in the data["s"] object 
-- use our add2ses function for that 
-- "ses" table is the only table which the id is not integer, it's a token string key 
-archive 
--use our archive engine , so tables that old can be cleaned up , use it for sessions and logs data 
-each records on our mysql have a json format field name "data" , use it for dynamics variable to save , use our get_data() functions and save_to_data functions in the core openSource utility
-use our core find_in_sql() function to scan the database and select a records , it's support a lot of options , with smart join ability.
-Do Not use SQL command at all
-temporary short term variable inside a loop , is as short as posible , but related to the variable you user , example, loop of table of users , use the key as "u" 
-use only lower case variables , or use _ but keep in short as posible 
-Use class rarely - the span life of a web page while it bbeeing generated is a shrt one - no need for classes 
-Write web pages on the fly - you need to know HTML / CSS and Javascrit as an expert 
-Avoide using JS if you don't need , generate all you can in the Python Server side 
-Writing Javascript
--use JS for client side interactiv
--do not search you element using class name , add id to each element you need to access 
--define events inline in the element onclick=xxx() do not use afterload event locking , programmesr need to find the events easylly inline on the element 
-api's 
-- use our utility to access server side 
-- it's secure and make the JS code on the client very simple 
-- the tools let you exchange objects , fro JS to python and back 
-- api's are used for html pages to be dynamics 
- table "gen" 
-- will contain the general constant of the system 
-- even small tables that not changed in time 
- table "users"
- table "logs" 
- table "ses" - active sessions 



